
import {Stats, FSWatcher} from 'fs';

export * from 'fs';

export function rename(oldPath: string, newPath: string): Promise<void>;
export function truncate(path: string | Buffer): Promise<void>;
export function truncate(path: string | Buffer, len: number): Promise<void>;
export function ftruncate(fd: number): Promise<void>;
export function ftruncate(fd: number, len: number): Promise<void>;
export function chown(path: string | Buffer, uid: number, gid: number): Promise<void>;
export function fchown(fd: number, uid: number, gid: number): Promise<void>;
export function lchown(path: string | Buffer, uid: number, gid: number): Promise<void>;
export function chmod(path: string | Buffer, mode: number): Promise<void>;
export function chmod(path: string | Buffer, mode: string): Promise<void>;
export function fchmod(fd: number, mode: number): Promise<void>;
export function fchmod(fd: number, mode: string): Promise<void>;
export function lchmod(path: string | Buffer, mode: number): Promise<void>;
export function lchmod(path: string | Buffer, mode: string): Promise<void>;
export function stat(path: string | Buffer): Promise<Stats>;
export function lstat(path: string | Buffer): Promise<Stats>;
export function fstat(fd: number): Promise<Stats>;
export function link(srcpath: string | Buffer, dstpath: string | Buffer): Promise<void>;
export function symlink(srcpath: string | Buffer, dstpath: string | Buffer, type?: string): Promise<void>;
export function readlink(path: string | Buffer): Promise<string>;
export function realpath(path: string | Buffer): Promise<string>;
export function realpath(path: string | Buffer, cache: { [path: string]: string }): Promise<string>;
export function unlink(path: string | Buffer): Promise<void>;
export function rmdir(path: string | Buffer): Promise<void>;
export function mkdir(path: string | Buffer): Promise<void>;
export function mkdir(path: string | Buffer, mode: number): Promise<void>;
export function mkdir(path: string | Buffer, mode: string): Promise<void>;
export function mkdtemp(prefix: string): Promise<string>;
export function readdir(path: string | Buffer): Promise<string[]>;
export function close(fd: number): Promise<void>;
export function open(path: string | Buffer, flags: string): Promise<number>;
export function open(path: string | Buffer, flags: string, mode: number): Promise<number>;
export function open(path: string | Buffer, flags: string, mode: string): Promise<number>;
export function utimes(path: string | Buffer, atime: number, mtime: number): Promise<void>;
export function utimes(path: string | Buffer, atime: Date, mtime: Date): Promise<void>;
export function futimes(fd: number, atime: number, mtime: number): Promise<void>;
export function futimes(fd: number, atime: Date, mtime: Date): Promise<void>;
export function fsync(fd: number): Promise<void>;
export function write(fd: number, buffer: Buffer, offset: number, length: number, position: number): Promise<[number, Buffer]>;
export function write(fd: number, buffer: Buffer, offset: number, length: number): Promise<[number, Buffer]>;
export function write(fd: number, data: any): Promise<[number, string]>;
export function write(fd: number, data: any, offset: number): Promise<[number, string]>;
export function write(fd: number, data: any, offset: number, encoding: string): Promise<[number, string]>;
export function read(fd: number, buffer: Buffer, offset: number, length: number, position: number): Promise<[number, Buffer]>;
export function readFile(filename: string, encoding: string): Promise<string>;
export function readFile(filename: string, options: { encoding: string; flag?: string; }): Promise<string>;
export function readFile(filename: string, options: { flag?: string; }): Promise<Buffer>;
export function readFile(filename: string): Promise<Buffer>;
export function writeFile(filename: string, data: any): Promise<void>;
export function writeFile(filename: string, data: any, options: { encoding?: string; mode?: number; flag?: string; }): Promise<void>;
export function writeFile(filename: string, data: any, options: { encoding?: string; mode?: string; flag?: string; }): Promise<void>;
export function appendFile(filename: string, data: any, options: { encoding?: string; mode?: number; flag?: string; }): Promise<void>;
export function appendFile(filename: string, data: any, options: { encoding?: string; mode?: string; flag?: string; }): Promise<void>;
export function appendFile(filename: string, data: any): Promise<void>;
export function watchFile(filename: string, listener: (curr: Stats, prev: Stats) => void): void;
export function watchFile(filename: string, options: { persistent?: boolean; interval?: number; }, listener: (curr: Stats, prev: Stats) => void): void;
export function unwatchFile(filename: string, listener?: (curr: Stats, prev: Stats) => void): void;
export function watch(filename: string, listener?: (event: string, filename: string) => any): FSWatcher;
export function watch(filename: string, options: { persistent?: boolean; }, listener?: (event: string, filename: string) => any): FSWatcher;
export function exists(path: string | Buffer): Promise<boolean>;
export function access(path: string | Buffer): Promise<void>;
export function access(path: string | Buffer, mode: number): Promise<void>;
